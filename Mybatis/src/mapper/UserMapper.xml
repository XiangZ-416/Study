<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace命名空间：对sql进行分类管理，就是对sql隔离
注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="Pakg_05_Mapper.Code_01_UserMapper">
    <!--在映射文件中要配置很多sql语句-->

    <!--1.需求：通过id查询用户表的记录-->
    <!--通过select执行数据库查询
        id：标识映射文件中的sql，标为statement的id
        也就是将sql语句封装在mapperStatement对象中，所以将id标为statement的id
        #{}：表示一个占位符
        parameterType：指定输入参数的类型，这里指定int型
        #{id}：其中的id表示输入参数，参数名就是id。如果输入参数是简单类型，#{}中的参数名可以任意
        resultType：指定sql的输出结果的所映射的java对象，这里select指定resultType表示将单条记录所映射成的java对象
    -->
    <select id="findUserById" parameterType="int" resultType="Pakg_02_Po.User">
        SELECT * FROM USER WHERE id=#{id};
    </select>

    <!--2.需求：通过用户名模糊查询用户表的记录，可能会有多条记录
        resultType：指定的就是单条记录所映射的java对象类型
        ${}：表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中
        使用${}拼接sql，容易引起sql注入
        ${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用username
    -->
    <select id="findUserByUserName" parameterType="String" resultType="Pakg_02_Po.User">
        SELECT * FROM user WHERE username LIKE '%${value}%';
    </select>

    <!--3.添加用户
    parameterType：指定输入参数类型是pojo（包括用户信息）
    #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
    id是自增的，不用写
    -->
    <insert id="insertUser" parameterType="Pakg_02_Po.User">
        <!--
            将刚插入数据的主键返回，返回到user对象中

            SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用于自增主键

            keyProperty：将查询到的主键值设置到parameterType指定的对象的那个属性
            order：SELECT_LAST INSERT_ID()的执行顺序，相对于insert的执行顺序
            resultType：指定SELECT_LAST INSERT_ID()结果的类型
         -->
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT into user(username, birthday, sex, address) values(#{username}, #{birthday}, #{sex}, #{address})
    </insert>

    <!-- 4.根据id删除用户-->
    <delete id="deleteUserById" parameterType="int">
        DELETE FROM user WHERE id=#{id}
    </delete>


    <!--5.根据id更新用户
        分析：
            需要传入的id
            需要传入用户的更新信息
            parameterType指定user对象，包括id和更新信息，注意：id必须存在
    -->
    <update id="updateUserById" parameterType="Pakg_02_Po.User">
        UPDATE user SET username=#{username} WHERE id=#{id}
    </update>

</mapper>
