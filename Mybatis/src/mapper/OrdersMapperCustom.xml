<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace命名空间：对sql进行分类管理，就是对sql隔离
注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="Pakg_05_Mapper.Code_03_OrdersMapperCustom">

    <!--定义多对多映射的resultMap:查询用户及其购买的商品的resultMap
        将整个查询结果映射到Pakg_02_Po.User
        使用extends继承
    -->
    <resultMap id="UserAndItemsResultMap" type="Pakg_02_Po.User">
        <!--用户信息-->
        <id column="user_id" property="id"/>
        <result column="username" property="username"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>
        <!--订单信息
            一个用户对应多个订单,使用collection映射
        -->
        <collection property="ordersList" ofType="Pakg_02_Po.Orders">
            <id column="id" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
            <result column="note" property="note"/>

            <!--订单明细
                一个订单包含多个明细,使用collection映射
            -->
            <collection property="orderdetails" ofType="Pakg_02_Po.Orderdetail">
                <!--column:订单明细唯一标识
                    property:要将订单明细的唯一标识映射到Orderdetail.java的哪个属性
                -->
                <id column="orderdetail_id" property="id"/>
                <result column="items_id" property="id"/>
                <result column="items_num" property="itemsNum"/>
                <result column="orders_id" property="ordersId"/>

                <!--商品信息
                    一个订单明细对应一个商品,使用association映射
                -->
                <association property="items" javaType="Pakg_02_Po.Items">
                    <id column="items_id" property="id"/>
                    <result column="items_name" property="name"/>
                    <result column="items_detail" property="detail"/>
                    <result column="items_price" property="price"/>
                </association>
            </collection>
        </collection>

    </resultMap>

    <!--定义一对多映射的resultMap：查询订单及订单明细的resultMap
        将整个查询到的结果映射到Pakg_02_Po.Orders中
        使用extends继承
    -->
    <resultMap id="OrdersAndOrderDetailResultMap" type="Pakg_02_Po.Orders" extends="OrderUserResultMap">
        <!--订单信息-->
        <!--用户信息-->
        <!--使用继承不用再重新配置订单信息和订单用户信息-->

        <!--订单明细信息
            一个订单关联查询出多条明细，要是有collection进行映射
            collection：对关联查询到的多条记录映射到集合对象中
            property：将关联查询到的多条记录映射到Order.java中的哪个属性
            ofType：指定映射到集合属性中pojo的类型
        -->
        <collection property="orderdetails" ofType="Pakg_02_Po.Orderdetail">
            <!--column:订单明细唯一标识
                property:要将订单明细的唯一标识映射到Orderdetail.java的哪个属性
            -->
            <id column="orderdetail_id" property="id"/>
            <result column="items_id" property="id"/>
            <result column="items_num" property="itemsNum"/>
            <result column="orders_id" property="ordersId"/>
        </collection>

    </resultMap>

    <!--定义一对一映射的resultMap：订单查询关联用户的resultMap
        将整个查询到的结果映射到Pakg_02_Po.Orders中
    -->

    <resultMap id="OrderUserResultMap" type="Pakg_02_Po.Orders">
        <!--配置要映射的订单信息-->
        <!--id：指定的查询列的唯一标识，即订单表中的唯一标识。如果多个列组成唯一标识，则配置多个id
            column：订单orders表中的唯一标识的列名
            property：订单信息唯一标识所映射到Orders.java中哪个属性中
        -->
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>

        <!--配置映射的关联的用户信息
            association：用于映射关联查询单个对象的信息
            property：要将关联查询的用户信息映射到Order.java中的哪个属性
        -->
        <association property="user" javaType="Pakg_02_Po.User">
            <!-- id：关联查询用户的唯 一标识
                column：指定唯 一标识用户信息的列
                javaType：映射到user的哪个属性
            -->
            <id column="user_id" property="id"/>
            <result column="username" property="username"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
    </resultMap>


    <!--一对一查询：查询订单，关联查询用户-->
    <!--1.使用resultType-->
    <select id="findOrdersUser" resultType="Pakg_02_Po.OrdersCustom">
        SELECT
            orders.*,
            user.username,
            user.sex,
            user.address
        FROM
            orders,
            User
        WHERE
            orders.user_id = user.id
    </select>
    <!--2.使用resultMap-->
    <select id="findOrdersUserResultMap" resultMap="OrderUserResultMap">
        SELECT
            orders.*,
            user.username,
            user.sex,
            user.address
        FROM
            orders,
            User
        WHERE
            orders.user_id = user.id
    </select>

    <!--一对多查询：查询订单关联查询用户及订单明细，使用resultMap-->
    <select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
        SELECT
            orders.*,
            user.username,
            user.sex,
            user.address,
            orderdetail.id orderdetail_id,
            orderdetail.items_id,
            orderdetail.items_num,
            orderdetail.orders_id,
        FROM
            orders,
            user,
            orderdetail
        WHERE
            orders.user_id = user.id
        AND
            orderdetail.orders_id=orders.id
    </select>

    <!--多对多映射:查询用户及购买的商品信息,使用resultMap-->
    <select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
        SELECT
            orders.*,
            user.username,
            user.sex,
            user.address,
            orderdetail.id orderdetail_id,
            orderdetail.items_id,
            orderdetail.items_num,
            orderdetail.orders_id,
            items.name items_name,
            items.detail items_detail,
            items.price items_price
        FROM
            orders,
            user,
            orderdetail
            items
        WHERE
            orders.user_id = user.id
        AND
            orderdetail.orders_id=orders.id
        AND
            orderdetail.items_id=items.id
    </select>

    <!--延迟加载的resultMap-->
    <resultMap id="OrdersUserLazyLoading" type="Pakg_02_Po.Orders">
        <!--对订单信息进行配置-->
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>
        <!--实现对用户信息进行延迟加载：一个订单对应一个用户，用association进行延迟加载
            select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）
            column：订单信息中关联用户信息查询的列，是user_id
            关联查询的sql理解为：
            SELECT
                orders.*,
                (SELECT username FROM user WHERE orders.user_id=user.id) username,
                (SELECT sex FROM user WHERE orders.user_id=user.id) sex
            FROM
                orders
            延迟加载的本质：先从订单表查询，需要时再从关联表进行关联查询，大大提高了数据库性能。因为查询单表要比管来年查询多张表要快
        -->
        <association property="user" javaType="Pakg_02_Po.User"
                     select="findUserById"
                     column="user_id">
        </association>
    </resultMap>

    <select id="findUserById" parameterType="int" resultType="Pakg_02_Po.User">
        SELECT * FROM USER WHERE id=#{id};
    </select>

    <!--查询订单关联查询用户，用户信息需要延迟加载-->
    <select id="findOrdersUserLazyLoading" resultMap="OrdersUserLazyLoading">
        SELECT
            *
        FROM
            orders
    </select>

</mapper>
